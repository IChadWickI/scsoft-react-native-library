{"version":3,"sources":["card_scan_options.ts"],"names":["CardHolderNameScanPosition","CardScanOptions","constructor","scanExpiryDate","scanCardHolderName","initialScansToDrop","validCardsToScanBeforeFinishingScan","cardHolderNameBlackListedWords","considerPastDatesInExpiryDateScan","maxCardHolderNameLength","enableLuhnCheck","cardScannerTimeOut","enableDebugLogs","possibleCardHolderNamePositions","belowCardNumber","map","join","position"],"mappings":";;;;;;;;;IAAYA,0B;;;WAAAA,0B;AAAAA,EAAAA,0B;AAAAA,EAAAA,0B;GAAAA,0B,0CAAAA,0B;;AAmBL,MAAMC,eAAN,CAAsB;AAa3BC,EAAAA,WAAW,GAYoB;AAAA,QAZnB;AACVC,MAAAA,cAAc,GAAG,IADP;AAEVC,MAAAA,kBAAkB,GAAG,KAFX;AAGVC,MAAAA,kBAAkB,GAAG,CAHX;AAIVC,MAAAA,mCAAmC,GAAG,CAJ5B;AAKVC,MAAAA,8BAA8B,GAAG,EALvB;AAMVC,MAAAA,iCAAiC,GAAG,KAN1B;AAOVC,MAAAA,uBAAuB,GAAG,EAPhB;AAQVC,MAAAA,eAAe,GAAG,IARR;AASVC,MAAAA,kBAAkB,GAAG,CATX;AAUVC,MAAAA,eAAe,GAAG,KAVR;AAWVC,MAAAA,+BAA+B,GAAG,CAACb,0BAA0B,CAACc,eAA5B;AAXxB,KAYmB,uEAAJ,EAAI;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAC7B,SAAKX,cAAL,GAAsBA,cAAtB;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,mCAAL,GAA2CA,mCAA3C;AACA,SAAKC,8BAAL,GAAsCA,8BAAtC;AACA,SAAKC,iCAAL,GAAyCA,iCAAzC;AACA,SAAKC,uBAAL,GAA+BA,uBAA/B;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKC,+BAAL,GAAuCA,+BAAvC;AACD;;AAEM,MAAHE,GAAG,GAAwB;AAC7B,WAAO;AACLZ,MAAAA,cAAc,EAAE,KAAKA,cADhB;AAELC,MAAAA,kBAAkB,EAAE,KAAKA,kBAFpB;AAGLC,MAAAA,kBAAkB,EAAE,KAAKA,kBAHpB;AAILC,MAAAA,mCAAmC,EAAE,KAAKA,mCAJrC;AAKLC,MAAAA,8BAA8B,EAAE,KAAKA,8BAAL,CAAoCS,IAApC,CAAyC,GAAzC,CAL3B;AAMLR,MAAAA,iCAAiC,EAAE,KAAKA,iCANnC;AAOLC,MAAAA,uBAAuB,EAAE,KAAKA,uBAPzB;AAQLC,MAAAA,eAAe,EAAE,KAAKA,eARjB;AASLC,MAAAA,kBAAkB,EAAE,KAAKA,kBATpB;AAULC,MAAAA,eAAe,EAAE,KAAKA,eAVjB;AAWLC,MAAAA,+BAA+B,EAAE,KAAKA,+BAAL,CAAqCE,GAArC,CAAyCE,QAAQ,IAAIA,QAArD;AAX5B,KAAP;AAaD;;AArD0B","sourcesContent":["export enum CardHolderNameScanPosition {\n  aboveCardNumber = \"aboveCardNumber\",\n  belowCardNumber = \"belowCardNumber\",\n}\n\nexport type CardScanOptionsParams = {\n  scanExpiryDate?: boolean;\n  scanCardHolderName?: boolean;\n  initialScansToDrop?: number;\n  validCardsToScanBeforeFinishingScan?: number;\n  cardHolderNameBlackListedWords?: string[];\n  considerPastDatesInExpiryDateScan?: boolean;\n  maxCardHolderNameLength?: number;\n  enableLuhnCheck?: boolean;\n  cardScannerTimeOut?: number;\n  enableDebugLogs?: boolean;\n  possibleCardHolderNamePositions?: CardHolderNameScanPosition[];\n};\n\nexport class CardScanOptions {\n  scanExpiryDate: boolean;\n  scanCardHolderName: boolean;\n  initialScansToDrop: number;\n  validCardsToScanBeforeFinishingScan: number;\n  cardHolderNameBlackListedWords: string[];\n  considerPastDatesInExpiryDateScan: boolean;\n  maxCardHolderNameLength: number;\n  enableLuhnCheck: boolean;\n  cardScannerTimeOut: number;\n  enableDebugLogs: boolean;\n  possibleCardHolderNamePositions: CardHolderNameScanPosition[];\n\n  constructor({\n    scanExpiryDate = true,\n    scanCardHolderName = false,\n    initialScansToDrop = 1,\n    validCardsToScanBeforeFinishingScan = 6,\n    cardHolderNameBlackListedWords = [],\n    considerPastDatesInExpiryDateScan = false,\n    maxCardHolderNameLength = 26,\n    enableLuhnCheck = true,\n    cardScannerTimeOut = 0,\n    enableDebugLogs = false,\n    possibleCardHolderNamePositions = [CardHolderNameScanPosition.belowCardNumber],\n  }: CardScanOptionsParams = {}) {\n    this.scanExpiryDate = scanExpiryDate;\n    this.scanCardHolderName = scanCardHolderName;\n    this.initialScansToDrop = initialScansToDrop;\n    this.validCardsToScanBeforeFinishingScan = validCardsToScanBeforeFinishingScan;\n    this.cardHolderNameBlackListedWords = cardHolderNameBlackListedWords;\n    this.considerPastDatesInExpiryDateScan = considerPastDatesInExpiryDateScan;\n    this.maxCardHolderNameLength = maxCardHolderNameLength;\n    this.enableLuhnCheck = enableLuhnCheck;\n    this.cardScannerTimeOut = cardScannerTimeOut;\n    this.enableDebugLogs = enableDebugLogs;\n    this.possibleCardHolderNamePositions = possibleCardHolderNamePositions;\n  }\n\n  get map(): Record<string, any> {\n    return {\n      scanExpiryDate: this.scanExpiryDate,\n      scanCardHolderName: this.scanCardHolderName,\n      initialScansToDrop: this.initialScansToDrop,\n      validCardsToScanBeforeFinishingScan: this.validCardsToScanBeforeFinishingScan,\n      cardHolderNameBlackListedWords: this.cardHolderNameBlackListedWords.join(\",\"),\n      considerPastDatesInExpiryDateScan: this.considerPastDatesInExpiryDateScan,\n      maxCardHolderNameLength: this.maxCardHolderNameLength,\n      enableLuhnCheck: this.enableLuhnCheck,\n      cardScannerTimeOut: this.cardScannerTimeOut,\n      enableDebugLogs: this.enableDebugLogs,\n      possibleCardHolderNamePositions: this.possibleCardHolderNamePositions.map(position => position),\n    };\n  }\n}\n"]}